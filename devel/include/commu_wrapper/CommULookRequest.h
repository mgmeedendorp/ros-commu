// Generated by gencpp from file commu_wrapper/CommULookRequest.msg
// DO NOT EDIT!


#ifndef COMMU_WRAPPER_MESSAGE_COMMULOOKREQUEST_H
#define COMMU_WRAPPER_MESSAGE_COMMULOOKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commu_wrapper
{
template <class ContainerAllocator>
struct CommULookRequest_
{
  typedef CommULookRequest_<ContainerAllocator> Type;

  CommULookRequest_()
    : look_x(0)
    , look_y(0)
    , look_z(0)  {
    }
  CommULookRequest_(const ContainerAllocator& _alloc)
    : look_x(0)
    , look_y(0)
    , look_z(0)  {
  (void)_alloc;
    }



   typedef int32_t _look_x_type;
  _look_x_type look_x;

   typedef int32_t _look_y_type;
  _look_y_type look_y;

   typedef int32_t _look_z_type;
  _look_z_type look_z;




  typedef boost::shared_ptr< ::commu_wrapper::CommULookRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commu_wrapper::CommULookRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommULookRequest_

typedef ::commu_wrapper::CommULookRequest_<std::allocator<void> > CommULookRequest;

typedef boost::shared_ptr< ::commu_wrapper::CommULookRequest > CommULookRequestPtr;
typedef boost::shared_ptr< ::commu_wrapper::CommULookRequest const> CommULookRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commu_wrapper::CommULookRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace commu_wrapper

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commu_wrapper::CommULookRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commu_wrapper::CommULookRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commu_wrapper::CommULookRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "933be4a7ef5344e40fff306ee2eddba8";
  }

  static const char* value(const ::commu_wrapper::CommULookRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x933be4a7ef5344e4ULL;
  static const uint64_t static_value2 = 0x0fff306ee2eddba8ULL;
};

template<class ContainerAllocator>
struct DataType< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commu_wrapper/CommULookRequest";
  }

  static const char* value(const ::commu_wrapper::CommULookRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
int32 look_x\n\
\n\
\n\
int32 look_y\n\
\n\
\n\
int32 look_z\n\
\n\
";
  }

  static const char* value(const ::commu_wrapper::CommULookRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.look_x);
      stream.next(m.look_y);
      stream.next(m.look_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CommULookRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commu_wrapper::CommULookRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commu_wrapper::CommULookRequest_<ContainerAllocator>& v)
  {
    s << indent << "look_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.look_x);
    s << indent << "look_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.look_y);
    s << indent << "look_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.look_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMU_WRAPPER_MESSAGE_COMMULOOKREQUEST_H
