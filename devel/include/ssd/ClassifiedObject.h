// Generated by gencpp from file ssd/ClassifiedObject.msg
// DO NOT EDIT!


#ifndef SSD_MESSAGE_CLASSIFIEDOBJECT_H
#define SSD_MESSAGE_CLASSIFIEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ssd/BoundingBox.h>

namespace ssd
{
template <class ContainerAllocator>
struct ClassifiedObject_
{
  typedef ClassifiedObject_<ContainerAllocator> Type;

  ClassifiedObject_()
    : header()
    , score(0.0)
    , label()
    , id()
    , bbox()  {
    }
  ClassifiedObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , score(0.0)
    , label(_alloc)
    , id(_alloc)
    , bbox(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _score_type;
  _score_type score;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::ssd::BoundingBox_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;




  typedef boost::shared_ptr< ::ssd::ClassifiedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssd::ClassifiedObject_<ContainerAllocator> const> ConstPtr;

}; // struct ClassifiedObject_

typedef ::ssd::ClassifiedObject_<std::allocator<void> > ClassifiedObject;

typedef boost::shared_ptr< ::ssd::ClassifiedObject > ClassifiedObjectPtr;
typedef boost::shared_ptr< ::ssd::ClassifiedObject const> ClassifiedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssd::ClassifiedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssd::ClassifiedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ssd

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ssd': ['/home/euclid/catkin_ws/src/ssd/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ssd::ClassifiedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssd::ClassifiedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssd::ClassifiedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssd::ClassifiedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssd::ClassifiedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssd::ClassifiedObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssd::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb5442e2046a6d60a459f1e47ecae020";
  }

  static const char* value(const ::ssd::ClassifiedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb5442e2046a6d60ULL;
  static const uint64_t static_value2 = 0xa459f1e47ecae020ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssd::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssd/ClassifiedObject";
  }

  static const char* value(const ::ssd::ClassifiedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssd::ClassifiedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message representing an object that was classified using caffe.\n\
Header header\n\
\n\
# The certainty of the classification from 0 to 1\n\
float64 score\n\
\n\
# The label attached to this object\n\
string label\n\
\n\
# The id of this object. This is only unique for one classification forom one image.\n\
string id\n\
\n\
# The bounding box for the classified object\n\
BoundingBox bbox\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ssd/BoundingBox\n\
# A simple 2d bounding box message\n\
\n\
float64 x_min\n\
float64 y_min\n\
float64 x_size\n\
float64 y_size\n\
";
  }

  static const char* value(const ::ssd::ClassifiedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssd::ClassifiedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.score);
      stream.next(m.label);
      stream.next(m.id);
      stream.next(m.bbox);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ClassifiedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssd::ClassifiedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssd::ClassifiedObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::ssd::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSD_MESSAGE_CLASSIFIEDOBJECT_H
